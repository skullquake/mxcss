// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package mxcss.actions;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.nio.file.attribute.FileTime;
import java.time.Instant;
import java.util.ArrayList;
import java.util.List;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import org.apache.commons.io.IOUtils;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class UnzipDocument extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private IMendixObject __ZipFile;
	private system.proxies.FileDocument ZipFile;
	private IMendixObject OutputFileType;
	private java.lang.String lastModifiedDateAttribute;

	public UnzipDocument(IContext context, IMendixObject ZipFile, IMendixObject OutputFileType, java.lang.String lastModifiedDateAttribute)
	{
		super(context);
		this.__ZipFile = ZipFile;
		this.OutputFileType = OutputFileType;
		this.lastModifiedDateAttribute = lastModifiedDateAttribute;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		this.ZipFile = __ZipFile == null ? null : system.proxies.FileDocument.initialize(getContext(), __ZipFile);

		// BEGIN USER CODE
		String objType = OutputFileType.getType();
		List<IMendixObject> outList = new ArrayList<IMendixObject>();
		
		try (
				InputStream inStream = Core.getFileDocumentContent(this.getContext(), ZipFile.getMendixObject());
				ZipInputStream zipInStream = new ZipInputStream(inStream);
		    ) {
				ZipEntry entry;
				while((entry = zipInStream.getNextEntry())!=null) {
					try (InputStream unzippedFile = convertZipInputStreamToInputStream(zipInStream);) {
						IMendixObject o = Core.instantiate(this.getContext(), objType);
						o.setValue(this.getContext(), "Name", entry.getName());
						if(lastModifiedDateAttribute != null && !lastModifiedDateAttribute.isEmpty()) {
							FileTime modifyFileTime = entry.getLastModifiedTime();
							if(modifyFileTime != null) {
								long createFileMillis = modifyFileTime.toMillis();
								java.util.Date modifyFileDate = new java.util.Date(createFileMillis);
								o.setValue(getContext(), lastModifiedDateAttribute, modifyFileDate);
							}
						}
						Core.storeFileDocumentContent(this.getContext(), o, unzippedFile);
						outList.add(o);
					}
				}
		    }
		
		return outList;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "UnzipDocument";
	}

	// BEGIN EXTRA CODE
	private InputStream convertZipInputStreamToInputStream(
	        final ZipInputStream in) throws IOException
	{
	    ByteArrayOutputStream out = new ByteArrayOutputStream();
	    IOUtils.copy(in, out);
	    InputStream is = new ByteArrayInputStream(out.toByteArray());
	    return is;
	}
	
	// END EXTRA CODE
}
